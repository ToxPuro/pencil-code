#!/bin/bash
#SBATCH --job-name=render_frames_deferred
#SBATCH --account=project_462000120
#SBATCH --output=slurm-render-job.out
#SBATCH --partition=small
#SBATCH --time=02:00:00
#SBATCH --ntasks=1

print_usage(){
    echo "$0 --input <input_dir> --output <output_dir> --dims <x,y> --sim-job <SLURM JOB ID> --delay <seconds>"
}

OPTS=`getopt -o i:o:d:s:h -l input:,output:,dims:,sim-job:,delay:,help -n "$0"  -- "$@"`
if [ $? != 0 ] ; then echo "Failed to parse args" >&2 ; exit 1 ; fi

eval set -- "$OPTS"

input_dir=output-slices
output_dir=output-slices-rendered
delay=300
simulation_running=0

while true;do
case "$1" in
-h|--help)
        print_usage
        exit 0
        ;;
-i|--input)
	shift
	input_dir=$1
	;;
-o|--output)
        shift
        output_dir=$1
        ;;
-d|--dims)
        shift
	OLDIFS=$IFS
	IFS=','
	read -a dims <<< "$1"
	IFS=$OLDIFS
        ;;
-s|--sim-job)
	shift
	sim_job_id=$1
	;;
--delay)
	shift
	delay=$1
	;;
--)
        shift
        break
        ;;
*)
        break
        ;;
esac
shift
done

if [[ -z "$sim_job_id" ]]; then
    printf "Error: sim-job-id not defined \n"
    print_usage
    exit 1
fi


if [[ -z "$input_dir" ]] ;then
    printf "Error: input_dir is not defined:\"$input_dir\"\n"
    print_usage
    exit 1
fi

if [[ -z "$output_dir" ]] ;then
    printf "Error: output_dir is not defined:\"$output_dir\"\n"
    print_usage
    exit 1
fi


if [[ -z "$SLURM_JOBID" ]] ;then
    printf "Error: \$SLURM_JOBID not defined, please submit this script with sbatch\n"
fi

echo "$SLURM_JOBID"

batchfile=$(scontrol show job $SLURM_JOBID | awk -F= '/Command=/{print $2}' | awk '{print $1}')

echo "$batchfile"
batchfile_dir=$(dirname $batchfile)

if [[ ! -d "$batchfile_dir" ]] ;then
    printf "Error: can't make sense of batch file path:\"$batchfile_dir\"\n"
    exit 1
fi

# Check if simulation is still running
simulation_state=$(sacct -j $sim_job_id -o "State" --noheader) 
if echo "$simulation_state" | grep -e RUNNING -e PENDING -e REQUEUED &> /dev/null; then
    simulation_running=1
fi

if [[ -z "$dims" ]]; then
    plot_dims_arg=""
    dims_arg=""
else
    plot_dims_arg="--dims ${dims[0]} ${dims[1]}"
    dims_arg="--dims ${dims[0]},${dims[1]}"
fi

#Move files and render them, this will probably be slower than the simulation itself
if [[ -d "$input_dir" ]] && [[ $simulation_running -eq 0 ]]; then
    mkdir -p $output_dir
    printf "$SLURM_JOBID $(date) : render start\n" >> render.log

    #Run renderer
    suffix=1
    while true; do
        batch_out_dir=$output_dir/batch.$suffix
        if [[ ! -e $batch_out_dir ]]; then
            break
        fi
        suffix=$((suffix + 1))
    done

    printf "$SLURM_JOBID $(date) : Creating directory $batch_out_dir\n" >> render.log
    mkdir -p $batch_out_dir

    n_frames=$(ls -1 $input_dir | wc -l)

    printf "$SLURM_JOBID $(date) : Rendering $n_frames slices from $input_dir at dimensions ${dims[0]} ${dims[1]} in $batch_out_dir \n" >> render.log
    srun $batchfile_dir/plot --output=$batch_out_dir --input $input_dir/* $plot_dims_arg >> render.log
    exit_code=$?
    n_frames_produced=$(ls -1 $batch_out_dir | wc -l)
    printf "$SLURM_JOBID $(date) : Render end. Produced $n_frames_produced frames Exit code:$exit_code\n" >> render.log
else
    printf "$SLURM_JOBID $(date) : Nothing to render, simulation still running or input dir does not exist\n" >> render.log
fi


#Resubmit if simulation is still running 
if [[ $simulation_running -eq 1 ]]; then
    printf "$SLURM_JOBID $(date) : submitting next render job after a delay of $delay seconds\n" >> render.log
    sbatch --begin=now+$delay $batchfile_dir/render_frames_deferred.batch --input $input_dir --output $output_dir --sim-job $sim_job_id $dims_arg --delay $delay
else
    printf "$SLURM_JOBID $(date) : Simulation has stopped, the last render job has finished\n" >> render.log
fi
