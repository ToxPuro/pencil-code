#include "stencil.ach"

Field UUX, UUY, UUZ
Field LNRHO
#define UU Field3(UUX, UUY, UUZ)

#define ZETA (1e-2)
#define NU_VISC (5e-4)
#define CS0 (1.0)

stress_tensor(v) {
    Matrix S

    S.data[0][0] = (2.0 / 3.0) * ddx(v.x) - (1.0 / 3.0) * (ddy(v.y) + ddz(v.z))
    S.data[0][1] = (1.0 / 2.0) * (ddy(v.x) + ddx(v.y))
    S.data[0][2] = (1.0 / 2.0) * (ddz(v.x) + ddx(v.z))

    S.data[1][0] = S.data[0][1]
    S.data[1][1] = (2.0 / 3.0) * ddy(v.y) - (1.0 / 3.0) * (ddx(v.x) + ddz(v.z))
    S.data[1][2] = (1.0 / 2.0) * (ddz(v.y) + ddy(v.z))

    S.data[2][0] = S.data[0][2]
    S.data[2][1] = S.data[1][2]
    S.data[2][2] = (2.0 / 3.0) * ddz(v.z) - (1.0 / 3.0) * (ddx(v.x) + ddy(v.y))

    return S
}

continuity() {

    // EXERCISE:
    // compute and return `- uu dot grad lnrho - nabla dot uu`
    // see `stencil.ach` for the avalable Stencil functions and operators
    return 1.0
}

momentum() {
  S = stress_tensor(UU)
  cs2 = CS0 * CS0

  return - gradients(UU) * vecvalue(UU)
         - cs2 * gradient(LNRHO)
         + NU_VISC * (veclaplace(UU) + (1. / 3.) * gradient_of_divergence(UU) + 2 * S * gradient(LNRHO))
         + ZETA * gradient_of_divergence(UU)
}

Kernel hydro() {

    // Continuity
    write(LNRHO, rk3(previous(LNRHO), value(LNRHO), continuity()))

    // Momentum
    mom = momentum()
    write(UUX, rk3(previous(UUX), value(UUX), mom.x))
    write(UUY, rk3(previous(UUY), value(UUY), mom.y))
    write(UUZ, rk3(previous(UUZ), value(UUZ), mom.z))
}